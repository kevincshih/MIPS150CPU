#include "uart.h"
#include "ascii.h"

/*	
	Bare minumum formatting code for checkpoint
	value - will be printed in hex to string
	target - some string location that characters are being copied to
	prints the value and character into the string for target
	integer value is printed in HEX for convenience
	this function only supports one int and one char which should be sufficient for checkpoint 3
*/
void fmode_cycles(char * target, char * buffer, uint32_t value, char c)
{
  int in = 0;	//index of next character in the input buffer to be copied
  int out = 0;	//index of the position in the output buffer to be copied
  char current = buffer[in];	//set the current character
  char form_char;		//temp variable for format char
  int j;
  int div;
  char temp[10];

  //copy by char into new buffer with formatting
  while (current != '\0') {
    if (current == '%') {
      in = in + 1;
      form_char = buffer[in];

      //abusing %d, should be %h
      if (form_char == 'd') {
	uint32_to_ascii_hex(value, temp, 10);
	for (j = 0; j < 8; j = j + 1) {
	  target[out] = temp[j];
	  out = out + 1;
	}
      } 
      else if (form_char == 'c') {
	target[out] = c;
	out = out + 1;
      } 
      else {
	uwrite_int8s("Error in formatting string\n\r");
      }
      in = in + 1;
    } else {
      target[out] = buffer[in];
      out = out + 1;
      in = in + 1;
    }
    current = buffer[in];
  }
  target[out] = '\0';	//null terminate string
  return;
}

/*
	Prints in DEC the min and sec
	Expression should have two formatting places %d. First %d will get min, second and onwards %d will get sec
	Values of min and sec must be between 0 and 99 since we're only printing two digits for the time anyways
*/
void fmin_sec(char * target, char* buffer, int min, int sec) {
  int in = 0; int out = 0;
  char next_char = buffer[in];
  int arg1 = 0;
  char temp[10];
  
  while(next_char != '\0') {
    if (next_char == '%') {
      in = in + 1;
      next_char = buffer[in];
      if (next_char == 'd' && !arg1) {
	uint32_to_ascii_hex(min, temp, 10);
	target[out] = temp[6];
	target[out+1] = temp[7];
	out = out + 2;
	arg1 = 1;
      }
      else if (next_char == 'd'){
	uint32_to_ascii_hex(sec, temp, 10);
	target[out] = temp[6];
	target[out+1] = temp[7];
	out = out + 2;
      } else {
	uwrite_int8s("Unrecognized format\n\r");
      }
    }
    else
      {
	target[out] = next_char;
	out = out + 1;
      }
    in = in + 1;
    next_char = buffer[in];
  }
  target[out] = '\0';
}

//Dummy test cases
int main(void)
{
  char buffer[40];
  char altbuf[40];
  int x = 0;
  uwrite_int8s("String format testing...\n\r");
  fmin_sec(altbuf, "%d:%d\n\r", 10, 1);	
  uwrite_int8s(altbuf);
  fmode_cycles(buffer, "%c.imgur.com/pwQYJ.gif %d\n\r", 7911, 'i');
  uwrite_int8s(buffer);
  uwrite_int8s("\n\rCompleted testing...\n\r");
  return 0;
}
